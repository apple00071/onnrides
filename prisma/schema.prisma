// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookings {
  id                  String    @id @default(uuid())
  user_id            String
  vehicle_id         String
  pickup_time        DateTime
  dropoff_time       DateTime
  total_amount       Float      @db.Real
  status             String     @default("pending") @db.VarChar(20)
  payment_status     String     @default("pending") @db.VarChar(20)
  payment_id         String?
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  user               users      @relation(fields: [user_id], references: [id])
  vehicle            vehicles   @relation(fields: [vehicle_id], references: [id])
  history            BookingHistory[]
}

model documents {
  id          String   @id @default(uuid())
  user_id     String
  doc_type    String   @db.VarChar(50)
  doc_url     String
  status      String   @default("pending") @db.VarChar(20)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        users    @relation(fields: [user_id], references: [id])
}

model users {
  id                String      @id @default(uuid())
  name              String      @db.VarChar(100)
  email             String      @unique @db.VarChar(100)
  phone             String?     @db.VarChar(20)
  password          String
  role              String      @default("user") @db.VarChar(20)
  status            String      @default("pending") @db.VarChar(20)
  profile_image     String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  bookings          bookings[]
  documents         documents[]
  history           BookingHistory[]
}

model vehicles {
  id                  String    @id @default(uuid())
  name               String     @db.VarChar(100)
  type               String     @db.VarChar(50)
  location           String     @db.VarChar(100)
  price_per_hour     Float      @db.Real
  min_booking_hours  Int       @default(1)
  quantity           Int       @default(1)
  images             String[]
  vehicle_category   String     @default("normal") @db.VarChar(10)
  delivery_price_7_days   Float?     @db.Real
  delivery_price_15_days  Float?     @db.Real
  delivery_price_30_days  Float?     @db.Real
  price_7_days      Float?     @db.Real
  price_15_days     Float?     @db.Real
  price_30_days     Float?     @db.Real
  is_available      Boolean    @default(true)
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  bookings           bookings[]

  @@index([vehicle_category])
}

model payments {
  id            String   @id @default(uuid())
  amount        Float    @db.Real
  currency      String   @default("INR") @db.VarChar(10)
  status        String   @default("pending") @db.VarChar(20)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model email_logs {
  id              String    @id @default(uuid())
  recipient       String
  subject         String
  message_content String    @db.Text
  booking_id      String?
  status          String
  error           String?   @db.Text
  message_id      String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model whatsapp_logs {
  id              String    @id @default(uuid())
  recipient       String
  message         String    @db.Text
  booking_id      String?
  status          String
  error           String?   @db.Text
  message_id      String?
  template_name   String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model BookingHistory {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_id  String   @db.Uuid
  action      String
  details     String
  created_by  String
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)
  booking     bookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  user        users?   @relation(fields: [created_by], references: [id])

  @@index([booking_id])
  @@index([created_at])
}

model settings {
  key         String    @id
  value       String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("settings")
}
