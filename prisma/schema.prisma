generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model bookings {
  id                String   @id
  user_id           String
  vehicle_id        String
  start_date        DateTime @db.Timestamp(6)
  end_date          DateTime @db.Timestamp(6)
  total_hours       Float    @db.Real
  total_price       Float    @db.Real
  status            String   @default("pending")
  payment_status    String   @default("pending")
  payment_details   String?
  payment_intent_id String?  @unique
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  pickup_location   String?
  dropoff_location  String?
  booking_id        String?
  users             users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_user_id_users_id_fk")
  vehicles          vehicles @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_vehicle_id_vehicles_id_fk")

  @@index([user_id, status], map: "idx_booking_user_status")
  @@index([vehicle_id, start_date, end_date], map: "idx_booking_vehicle_dates")
  @@index([payment_status], map: "idx_booking_payment_status")
  @@index([payment_intent_id], map: "idx_bookings_payment_intent_id")
}

model document_submissions {
  id             Int       @id @default(autoincrement())
  user_id        Int?
  document_type  String    @db.VarChar(50)
  document_url   String
  status         String?   @default("pending") @db.VarChar(50)
  admin_comments String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
}

model documents {
  id               String   @id
  user_id          String
  type             String
  status           String   @default("pending")
  file_url         String
  rejection_reason String?
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  users            users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "documents_user_id_users_id_fk")
}

model locations {
  id         String    @id @default(cuid())
  name       String    @db.VarChar(255)
  address    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model payments {
  id             Int       @id @default(autoincrement())
  booking_id     Int?
  user_id        Int?
  amount         Decimal   @db.Decimal
  payment_method String?   @db.VarChar(50)
  transaction_id String?   @db.VarChar(255)
  status         String?   @default("pending") @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
}

model profiles {
  id         String    @id @default(cuid())
  user_id    String?
  name       String?   @db.VarChar(255)
  phone      String?   @db.VarChar(50)
  avatar_url String?
  address    String?
  city       String?   @db.VarChar(100)
  state      String?   @db.VarChar(100)
  country    String?   @db.VarChar(100)
  zip_code   String?   @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  vehicle_id Int?
  booking_id Int?
  rating     Int
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model users {
  id                 String      @id
  name               String?
  email              String      @unique(map: "users_email_unique")
  password_hash      String?
  phone              String?
  reset_token        String?
  reset_token_expiry DateTime?   @db.Timestamp(6)
  is_blocked         Boolean?    @default(false)
  role               String      @default("user")
  created_at         DateTime    @default(now()) @db.Timestamp(6)
  updated_at         DateTime    @default(now()) @db.Timestamp(6)
  bookings           bookings[]
  documents          documents[]
}

model vehicles {
  id                String     @id
  name              String
  type              String
  location          String
  quantity          Int
  price_per_hour    Float      @db.Real
  min_booking_hours Int
  is_available      Boolean?   @default(true)
  images            String
  status            String     @default("active")
  created_at        DateTime   @default(now()) @db.Timestamp(6)
  updated_at        DateTime   @default(now()) @db.Timestamp(6)
  price_15_days     Float?     @db.Real
  price_30_days     Float?     @db.Real
  price_7_days      Float?     @db.Real
  bookings          bookings[]

  @@index([status, is_available], map: "idx_vehicle_status_availability")
  @@index([location, type], map: "idx_vehicle_location_type")
  @@index([updated_at], map: "idx_vehicle_updated_at")
}

model coupons {
  id                  String    @id @default(uuid())
  code                String    @unique
  description         String?
  discount_type       String
  discount_value      Decimal   @db.Decimal(10, 2)
  min_booking_amount  Decimal?  @db.Decimal(10, 2)
  max_discount_amount Decimal?  @db.Decimal(10, 2)
  start_date          DateTime? @db.Timestamp(6)
  end_date            DateTime? @db.Timestamp(6)
  usage_limit         Int?
  times_used          Int?      @default(0)
  is_active           Boolean?  @default(true)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamp(6)

  @@index([code], map: "idx_coupons_code")
  @@index([is_active], map: "idx_coupons_is_active")
}

model email_logs {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recipient       String
  subject         String
  message_content String
  status          String
  error           String?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@index([recipient], map: "idx_email_logs_recipient")
  @@index([status], map: "idx_email_logs_status")
}

model settings {
  id         String   @id
  key        String   @unique
  value      String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model AdminNotification {
  id         String   @id @default(uuid())
  type       String
  title      String
  recipient  String
  channel    String
  status     String
  error      String?
  data       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([type, status])
  @@index([recipient, channel])
  @@index([created_at])
}

model sms_logs {
  id           String   @id
  phone_number String
  message      String
  status       String   @default("pending")
  created_at   DateTime @default(now())
  updated_at   DateTime
}

enum vehicle_status {
  active
  maintenance
  retired
}
