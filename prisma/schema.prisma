// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?   @map("password_hash")
  role          String    @default("user")
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isBlocked     Boolean   @default(false) @map("is_blocked")
  resetToken    String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  bookings      Booking[]

  @@map("users")
}

model Vehicle {
  id             String    @id @default(uuid())
  name           String
  type           String
  brand          String?
  model          String?
  year           Int?
  color          String?
  licensePlate   String?   @map("license_plate")
  location       String
  quantity       Int       @default(1)
  pricePerHour   Float     @map("price_per_hour")
  minBookingHours Int      @default(1) @map("min_booking_hours")
  price7Days     Float?    @map("price_7_days")
  price15Days    Float?    @map("price_15_days")
  price30Days    Float?    @map("price_30_days")
  isDeliveryEnabled Boolean @default(false) @map("is_delivery_enabled")
  deliveryPrice7Days  Float?    @map("delivery_price_7_days")
  deliveryPrice15Days Float?    @map("delivery_price_15_days")
  deliveryPrice30Days Float?    @map("delivery_price_30_days")
  isAvailable    Boolean   @default(true) @map("is_available")
  images         Json?
  status         String    @default("active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  bookings       Booking[]

  @@map("vehicles")
}

model Booking {
  id              String    @id @default(uuid())
  bookingId       String    @unique @map("booking_id")
  userId          String    @map("user_id")
  vehicleId       String    @map("vehicle_id")
  startDate       DateTime  @map("start_date")
  endDate         DateTime  @map("end_date")
  totalHours      Float     @map("total_hours")
  totalPrice      Float     @map("total_price")
  status          String    @default("pending")
  paymentStatus   String    @default("pending") @map("payment_status")
  paymentDetails  Json?     @map("payment_details")
  pickupLocation  String?   @map("pickup_location")
  dropoffLocation String?   @map("dropoff_location")
  notes           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  paymentIntentId String?   @map("payment_intent_id")
  user            User      @relation(fields: [userId], references: [id])
  vehicle         Vehicle   @relation(fields: [vehicleId], references: [id])

  @@map("bookings")
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model EmailLog {
  id             String   @id @default(uuid())
  recipient      String
  subject        String
  messageContent String   @map("message_content")
  bookingId      String?  @map("booking_id")
  status         String   @default("pending")
  messageId      String?  @map("message_id")
  error          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("email_logs")
} 