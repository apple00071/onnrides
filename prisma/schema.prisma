// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Important: We're using camelCase in code, but the database uses snake_case
// The @map directive maintains compatibility with existing code while ensuring
// proper column names in the database

model Settings {
  id         String   @id @default(uuid())
  key        String   @unique
  value      String
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Booking {
  id              String    @id @default(uuid()) @db.Uuid
  booking_id      String?
  user_id         String    @db.Uuid
  vehicle_id      String    @db.Uuid
  start_date      DateTime  @db.Timestamp(6)
  end_date        DateTime  @db.Timestamp(6)
  total_hours     Float?
  total_price     Float?
  status          String    @default("pending")
  payment_status  String?
  payment_details Json?
  pickup_location Json?
  dropoff_location Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  payment_intent_id String?
  user            User      @relation(fields: [user_id], references: [id])
  vehicle         Vehicle   @relation(fields: [vehicle_id], references: [id])
  reviews         Review[]

  @@map("bookings")
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  name          String?
  email         String?    @unique
  email_verified DateTime?
  phone         String?    @unique
  phone_verified Boolean    @default(false)
  image         String?
  role          String     @default("USER")
  password      String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  accounts      Account[]
  reviews       Review[]
  bookings      Booking[]
  sessions      Session[]

  @@map("users")
}

model Vehicle {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  type            String
  description     String?
  images          Json?
  location        String?
  price_per_hour  Float
  min_booking_hours Int      @default(1)
  is_available    Boolean    @default(true)
  features        Json?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  bookings        Booking[]
  reviews         Review[]

  @@map("vehicles")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  user_id   String   @db.Uuid
  vehicle_id String  @db.Uuid
  booking_id String? @db.Uuid
  rating    Int
  comment   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  booking   Booking? @relation(fields: [booking_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicle_id], references: [id])

  @@map("reviews")
}

model Account {
  id                String   @id @default(cuid())
  user_id           String   @db.Uuid
  type              String
  provider          String
  provider_account_id String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  session_token String  @unique
  user_id      String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Location {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  address   String?
  city      String?
  state     String?
  country   String?
  zipcode   String?
  lat       Float?
  lng       Float?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("locations")
}

model EmailLog {
  id        String   @id @default(uuid()) @db.Uuid
  recipient String
  subject   String
  body      String
  status    String
  error     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("email_logs")
}

model WhatsAppLog {
  id        String   @id @default(uuid()) @db.Uuid
  recipient String
  message   String
  status    String
  error     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("whatsapp_logs")
} 