// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Important: We're using camelCase in code, but the database uses snake_case
// The @map directive maintains compatibility with existing code while ensuring
// proper column names in the database

model Settings {
  id         String   @id @default(uuid())
  key        String   @unique
  value      String
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Booking {
  id                String   @id @default(uuid()) @db.Uuid
  booking_id        String   @unique
  user_id          String   @db.Uuid
  vehicle_id       String   @db.Uuid
  start_date       DateTime @db.Timestamptz(6)
  end_date         DateTime @db.Timestamptz(6)
  total_price      Decimal  @db.Decimal(10, 2)
  status           String   @default("pending")
  notes            String?  @db.Text
  booking_type     String   @default("online")
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  
  // Customer Information
  customer_name    String?
  phone_number     String?
  email           String?
  alternate_phone  String?
  aadhar_number   String?
  father_number   String?
  mother_number   String?
  date_of_birth   DateTime? @db.Date
  dl_number       String?
  dl_expiry_date  DateTime? @db.Timestamptz(6)
  permanent_address String?  @db.Text
  
  // Vehicle Details
  vehicle_model    String?
  registration_number String?
  
  // Payment Details
  rental_amount   Decimal?  @db.Decimal(10, 2)
  security_deposit_amount Decimal? @db.Decimal(10, 2)
  total_amount    Decimal?  @db.Decimal(10, 2)
  paid_amount     Decimal?  @db.Decimal(10, 2)
  pending_amount  Decimal?  @db.Decimal(10, 2)
  payment_method   String?
  payment_status   String?
  payment_reference String?
  
  // Documents
  dl_scan         String?
  aadhar_scan     String?
  selfie          String?
  
  // Terms and Conditions
  terms_accepted   Boolean @default(false)
  
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vehicle          Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  payments         Payment[]
  vehicle_return   VehicleReturn?
  trip_initiation  TripInitiation?
  reviews         Review[]

  @@map("bookings")
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  name          String?
  email         String?    @unique
  email_verified DateTime?
  phone         String?    @unique
  phone_verified Boolean    @default(false)
  image         String?
  role          String     @default("USER")
  password_hash String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  accounts      Account[]
  reviews       Review[]
  bookings      Booking[]
  sessions      Session[]
  processed_returns VehicleReturn[] @relation("ProcessedReturns")

  @@map("users")
}

model Vehicle {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  type            String
  description     String?
  images          Json?
  location        String?
  quantity        Int       @default(1)
  price_per_hour  Float
  price_7_days    Float?
  price_15_days   Float?
  price_30_days   Float?
  delivery_price_7_days  Float?
  delivery_price_15_days Float?
  delivery_price_30_days Float?
  min_booking_hours Int      @default(1)
  is_available    Boolean    @default(true)
  is_delivery_enabled Boolean @default(false)
  vehicle_category String    @default("normal")
  status          String    @default("active")
  features        Json?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  bookings        Booking[]
  reviews         Review[]

  @@map("vehicles")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  user_id   String   @db.Uuid
  vehicle_id String  @db.Uuid
  booking_id String? @db.Uuid
  rating    Int
  comment   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  booking   Booking? @relation(fields: [booking_id], references: [id], onDelete: SetNull)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vehicle   Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Account {
  id                String   @id @default(cuid())
  user_id           String   @db.Uuid
  type              String
  provider          String
  provider_account_id String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  session_token String  @unique
  user_id      String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Location {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  address   String?
  city      String?
  state     String?
  country   String?
  zipcode   String?
  lat       Float?
  lng       Float?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("locations")
}

model EmailLog {
  id        String   @id @default(uuid()) @db.Uuid
  recipient String
  subject   String
  body      String
  status    String
  error     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("email_logs")
}

model WhatsAppLog {
  id        String   @id @default(uuid()) @db.Uuid
  recipient String
  message   String
  status    String
  error     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("whatsapp_logs")
}

model VehicleReturn {
  id                String   @id @default(uuid()) @db.Uuid
  booking_id        String   @unique @db.Uuid
  condition_notes   String?
  damages          Json?
  additional_charges Float   @default(0)
  odometer_reading  Float?
  fuel_level       Float?
  status           String   @default("pending")
  processed_by     String   @db.Uuid
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  booking          Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  processed_by_user User    @relation("ProcessedReturns", fields: [processed_by], references: [id], onDelete: Cascade)

  @@map("vehicle_returns")
}

model TripInitiation {
  id                    String   @id @default(uuid()) @db.Uuid
  booking_id           String   @unique @db.Uuid
  checklist_completed  Boolean  @default(false)
  customer_name        String?  @db.VarChar(255)
  customer_phone       String?  @db.VarChar(20)
  customer_email       String?  @db.VarChar(255)
  customer_dl_number   String?  @db.VarChar(50)
  customer_address     String?  @db.Text
  emergency_contact    String?  @db.VarChar(20)
  emergency_name       String?  @db.VarChar(255)
  customer_aadhaar_number String? @db.VarChar(20)
  customer_dob         String?  @db.VarChar(20)
  vehicle_number       String?  @db.VarChar(50)
  documents            Json     @default("{}")
  terms_accepted       Boolean  @default(false)
  notes               String?  @db.Text
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  booking             Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)

  @@map("trip_initiations")
}

model Payment {
  id                String   @id @default(uuid()) @db.Uuid
  booking_id        String   @db.Uuid
  amount            Decimal  @db.Decimal(10, 2)
  status            String   @default("pending")
  method            String?
  reference         String?
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)
  booking           Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)

  @@map("payments")
} 