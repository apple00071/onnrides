// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isBlocked     Boolean   @default(false)
  bookings      Booking[]

  @@map("users")
}

model Vehicle {
  id             String    @id @default(uuid())
  name           String
  type           String
  brand          String?
  model          String?
  year           Int?
  color          String?
  licensePlate   String?
  location       String
  quantity       Int       @default(1)
  pricePerHour   Float
  minBookingHours Int      @default(1)
  isAvailable    Boolean   @default(true)
  images         Json?
  status         String    @default("active")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]

  @@map("vehicles")
}

model Booking {
  id              String    @id @default(uuid())
  bookingId       String    @unique
  userId          String
  vehicleId       String
  startDate       DateTime
  endDate         DateTime
  totalHours      Float
  totalPrice      Float
  status          String    @default("pending")
  paymentStatus   String    @default("pending")
  paymentDetails  Json?
  pickupLocation  String?
  dropoffLocation String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  vehicle        Vehicle   @relation(fields: [vehicleId], references: [id])

  @@map("bookings")
}

model Settings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model EmailLog {
  id             String   @id @default(uuid())
  recipient      String
  subject        String
  messageContent String   @map("message_content")
  bookingId      String?
  status         String   @default("pending")
  messageId      String?  @map("message_id")
  error          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("email_logs")
} 